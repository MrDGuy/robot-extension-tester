tile_map1 = tiles.create_map(tilemap("""level1"""))
tile_map2 = tiles.create_map(tilemap("""level2"""))
tiles.load_map(tile_map1)
robot.begin_screen()
tiles.connect_map_by_id(tile_map1, tile_map2, ConnectionKind.door1)
def on_overlap_tile(sprite, location):
    tiles.load_map(tile_map2)
    robot.begin_screen()
scene.on_overlap_tile(SpriteKind.player, assets.tile("""door1"""), on_overlap_tile)
robot.turn_left()
robot.move_forward()
robot.move_forward()
robot.move_forward()
robot.collect_coin()
robot.turn_left()
robot.move_forward()
robot.move_forward()
robot.turn_left()
robot.move_forward()
robot.move_forward()
robot.move_forward()
robot.collect_coin()
robot.move_forward()
robot.move_forward()
robot.move_forward()
robot.turn_left()
robot.move_forward()
robot.move_forward()
robot.collect_coin()
robot.move_forward()
robot.turn_left()
robot.move_forward()
robot.turn_right()
robot.move_forward()
robot.move_forward()
robot.collect_coin()
robot.turn_right()
robot.move_forward()
robot.move_forward()
robot.turn_left()
robot.move_forward()
robot.move_forward()
robot.move_forward()
robot.move_forward()
robot.move_forward()
robot.move_forward()
robot.move_forward()
robot.turn_right()
robot.move_forward()
while(robot.goal_reached()==False):
    if(robot.can_move("forward")):
        robot.move_forward()
    if(robot.can_move("right")):
        robot.turn_right()
    if(robot.can_move("left")):
        robot.turn_left()
    if(robot.detect_coin()):
        robot.collect_coin()